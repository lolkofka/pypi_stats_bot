import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import Config


config = Config.load()


def is_admin(user_id: int) -> bool:
    return user_id in config.admins

async def fetch_downloads(package_name: str) -> str:
    url = f"https://pepy.tech/api/v2/projects/{package_name}"
    headers = {
        "X-API-Key": config.pepy_api_key
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                total = data.get("total_downloads", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return f"üì¶ {package_name}: {total:,} –∑–∞–≥—Ä—É–∑–æ–∫"
            else:
                return f"‚ùå {package_name}: –æ—à–∏–±–∫–∞ ({response.status})"


async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /stats —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫.")

async def cmd_stats(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")
    tasks = [fetch_downloads(pkg) for pkg in config.packages]
    results = await asyncio.gather(*tasks)
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:\n\n" + "\n".join(results))


async def main():
    bot = Bot(token=config.bot_token)
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_stats, Command("stats"))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
